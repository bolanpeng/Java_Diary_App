/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-10-17 16:43:55 UTC)
 * on 2016-11-30 at 18:06:29 UTC 
 * Modify at your own risk.
 */

package com.shelley.diary.backend.myApi;

/**
 * Service definition for MyApi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link MyApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class MyApi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.22.0 of the myApi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationId.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "myApi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public MyApi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  MyApi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "insertDiary".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link InsertDiary#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.shelley.diary.backend.myApi.model.MyDiary}
   * @return the request
   */
  public InsertDiary insertDiary(com.shelley.diary.backend.myApi.model.MyDiary content) throws java.io.IOException {
    InsertDiary result = new InsertDiary(content);
    initialize(result);
    return result;
  }

  public class InsertDiary extends MyApiRequest<com.shelley.diary.backend.myApi.model.MyDiary> {

    private static final String REST_PATH = "mydiary";

    /**
     * Create a request for the method "insertDiary".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link InsertDiary#execute()} method to invoke the remote operation. <p>
     * {@link
     * InsertDiary#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.shelley.diary.backend.myApi.model.MyDiary}
     * @since 1.13
     */
    protected InsertDiary(com.shelley.diary.backend.myApi.model.MyDiary content) {
      super(MyApi.this, "POST", REST_PATH, content, com.shelley.diary.backend.myApi.model.MyDiary.class);
    }

    @Override
    public InsertDiary setAlt(java.lang.String alt) {
      return (InsertDiary) super.setAlt(alt);
    }

    @Override
    public InsertDiary setFields(java.lang.String fields) {
      return (InsertDiary) super.setFields(fields);
    }

    @Override
    public InsertDiary setKey(java.lang.String key) {
      return (InsertDiary) super.setKey(key);
    }

    @Override
    public InsertDiary setOauthToken(java.lang.String oauthToken) {
      return (InsertDiary) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertDiary setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertDiary) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertDiary setQuotaUser(java.lang.String quotaUser) {
      return (InsertDiary) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertDiary setUserIp(java.lang.String userIp) {
      return (InsertDiary) super.setUserIp(userIp);
    }

    @Override
    public InsertDiary set(String parameterName, Object value) {
      return (InsertDiary) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertUser".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link InsertUser#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.shelley.diary.backend.myApi.model.Users}
   * @return the request
   */
  public InsertUser insertUser(com.shelley.diary.backend.myApi.model.Users content) throws java.io.IOException {
    InsertUser result = new InsertUser(content);
    initialize(result);
    return result;
  }

  public class InsertUser extends MyApiRequest<com.shelley.diary.backend.myApi.model.Users> {

    private static final String REST_PATH = "users";

    /**
     * Create a request for the method "insertUser".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link InsertUser#execute()} method to invoke the remote operation. <p>
     * {@link
     * InsertUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.shelley.diary.backend.myApi.model.Users}
     * @since 1.13
     */
    protected InsertUser(com.shelley.diary.backend.myApi.model.Users content) {
      super(MyApi.this, "POST", REST_PATH, content, com.shelley.diary.backend.myApi.model.Users.class);
    }

    @Override
    public InsertUser setAlt(java.lang.String alt) {
      return (InsertUser) super.setAlt(alt);
    }

    @Override
    public InsertUser setFields(java.lang.String fields) {
      return (InsertUser) super.setFields(fields);
    }

    @Override
    public InsertUser setKey(java.lang.String key) {
      return (InsertUser) super.setKey(key);
    }

    @Override
    public InsertUser setOauthToken(java.lang.String oauthToken) {
      return (InsertUser) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertUser setQuotaUser(java.lang.String quotaUser) {
      return (InsertUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertUser setUserIp(java.lang.String userIp) {
      return (InsertUser) super.setUserIp(userIp);
    }

    @Override
    public InsertUser set(String parameterName, Object value) {
      return (InsertUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listDiaries".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link ListDiaries#execute()} method to invoke the remote operation.
   *
   * @param userid
   * @return the request
   */
  public ListDiaries listDiaries(java.lang.String userid) throws java.io.IOException {
    ListDiaries result = new ListDiaries(userid);
    initialize(result);
    return result;
  }

  public class ListDiaries extends MyApiRequest<com.shelley.diary.backend.myApi.model.CollectionResponseMyDiary> {

    private static final String REST_PATH = "mydiary/{userid}";

    /**
     * Create a request for the method "listDiaries".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link ListDiaries#execute()} method to invoke the remote operation. <p>
     * {@link
     * ListDiaries#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userid
     * @since 1.13
     */
    protected ListDiaries(java.lang.String userid) {
      super(MyApi.this, "GET", REST_PATH, null, com.shelley.diary.backend.myApi.model.CollectionResponseMyDiary.class);
      this.userid = com.google.api.client.util.Preconditions.checkNotNull(userid, "Required parameter userid must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListDiaries setAlt(java.lang.String alt) {
      return (ListDiaries) super.setAlt(alt);
    }

    @Override
    public ListDiaries setFields(java.lang.String fields) {
      return (ListDiaries) super.setFields(fields);
    }

    @Override
    public ListDiaries setKey(java.lang.String key) {
      return (ListDiaries) super.setKey(key);
    }

    @Override
    public ListDiaries setOauthToken(java.lang.String oauthToken) {
      return (ListDiaries) super.setOauthToken(oauthToken);
    }

    @Override
    public ListDiaries setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListDiaries) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListDiaries setQuotaUser(java.lang.String quotaUser) {
      return (ListDiaries) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListDiaries setUserIp(java.lang.String userIp) {
      return (ListDiaries) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String userid;

    /**

     */
    public java.lang.String getUserid() {
      return userid;
    }

    public ListDiaries setUserid(java.lang.String userid) {
      this.userid = userid;
      return this;
    }

    @Override
    public ListDiaries set(String parameterName, Object value) {
      return (ListDiaries) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeDiary".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link RemoveDiary#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public RemoveDiary removeDiary(java.lang.Long id) throws java.io.IOException {
    RemoveDiary result = new RemoveDiary(id);
    initialize(result);
    return result;
  }

  public class RemoveDiary extends MyApiRequest<Void> {

    private static final String REST_PATH = "diary/{id}";

    /**
     * Create a request for the method "removeDiary".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link RemoveDiary#execute()} method to invoke the remote operation. <p>
     * {@link
     * RemoveDiary#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveDiary(java.lang.Long id) {
      super(MyApi.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveDiary setAlt(java.lang.String alt) {
      return (RemoveDiary) super.setAlt(alt);
    }

    @Override
    public RemoveDiary setFields(java.lang.String fields) {
      return (RemoveDiary) super.setFields(fields);
    }

    @Override
    public RemoveDiary setKey(java.lang.String key) {
      return (RemoveDiary) super.setKey(key);
    }

    @Override
    public RemoveDiary setOauthToken(java.lang.String oauthToken) {
      return (RemoveDiary) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveDiary setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveDiary) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveDiary setQuotaUser(java.lang.String quotaUser) {
      return (RemoveDiary) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveDiary setUserIp(java.lang.String userIp) {
      return (RemoveDiary) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveDiary setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveDiary set(String parameterName, Object value) {
      return (RemoveDiary) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateDiary".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link UpdateDiary#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.shelley.diary.backend.myApi.model.MyDiary}
   * @return the request
   */
  public UpdateDiary updateDiary(com.shelley.diary.backend.myApi.model.MyDiary content) throws java.io.IOException {
    UpdateDiary result = new UpdateDiary(content);
    initialize(result);
    return result;
  }

  public class UpdateDiary extends MyApiRequest<com.shelley.diary.backend.myApi.model.MyDiary> {

    private static final String REST_PATH = "mydiary";

    /**
     * Create a request for the method "updateDiary".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link UpdateDiary#execute()} method to invoke the remote operation. <p>
     * {@link
     * UpdateDiary#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.shelley.diary.backend.myApi.model.MyDiary}
     * @since 1.13
     */
    protected UpdateDiary(com.shelley.diary.backend.myApi.model.MyDiary content) {
      super(MyApi.this, "PUT", REST_PATH, content, com.shelley.diary.backend.myApi.model.MyDiary.class);
    }

    @Override
    public UpdateDiary setAlt(java.lang.String alt) {
      return (UpdateDiary) super.setAlt(alt);
    }

    @Override
    public UpdateDiary setFields(java.lang.String fields) {
      return (UpdateDiary) super.setFields(fields);
    }

    @Override
    public UpdateDiary setKey(java.lang.String key) {
      return (UpdateDiary) super.setKey(key);
    }

    @Override
    public UpdateDiary setOauthToken(java.lang.String oauthToken) {
      return (UpdateDiary) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateDiary setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateDiary) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateDiary setQuotaUser(java.lang.String quotaUser) {
      return (UpdateDiary) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateDiary setUserIp(java.lang.String userIp) {
      return (UpdateDiary) super.setUserIp(userIp);
    }

    @Override
    public UpdateDiary set(String parameterName, Object value) {
      return (UpdateDiary) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "verifyUser".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link VerifyUser#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public VerifyUser verifyUser(java.lang.String id) throws java.io.IOException {
    VerifyUser result = new VerifyUser(id);
    initialize(result);
    return result;
  }

  public class VerifyUser extends MyApiRequest<com.shelley.diary.backend.myApi.model.Users> {

    private static final String REST_PATH = "verifyUser/{id}";

    /**
     * Create a request for the method "verifyUser".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link VerifyUser#execute()} method to invoke the remote operation. <p>
     * {@link
     * VerifyUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected VerifyUser(java.lang.String id) {
      super(MyApi.this, "POST", REST_PATH, null, com.shelley.diary.backend.myApi.model.Users.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public VerifyUser setAlt(java.lang.String alt) {
      return (VerifyUser) super.setAlt(alt);
    }

    @Override
    public VerifyUser setFields(java.lang.String fields) {
      return (VerifyUser) super.setFields(fields);
    }

    @Override
    public VerifyUser setKey(java.lang.String key) {
      return (VerifyUser) super.setKey(key);
    }

    @Override
    public VerifyUser setOauthToken(java.lang.String oauthToken) {
      return (VerifyUser) super.setOauthToken(oauthToken);
    }

    @Override
    public VerifyUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (VerifyUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public VerifyUser setQuotaUser(java.lang.String quotaUser) {
      return (VerifyUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public VerifyUser setUserIp(java.lang.String userIp) {
      return (VerifyUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public VerifyUser setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public VerifyUser set(String parameterName, Object value) {
      return (VerifyUser) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link MyApi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link MyApi}. */
    @Override
    public MyApi build() {
      return new MyApi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link MyApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setMyApiRequestInitializer(
        MyApiRequestInitializer myapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(myapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
